# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Dart

on:
  push:
    branches: [ "master" ]
  pull_request_target:
    branches: [ "master" ]
    paths: 
      -"v1"
env:
                GITHUB_TOKEN: ${{ secrets.GH_PAT }}
                SAUCE_USERNAME: ${{secrets.SAUCE_USERNAME}}
                SAUCE_ACCESS_KEY: ${{secrets.SAUCE_ACCESS_KEY}}
                SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
                SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # Note: This workflow uses the latest stable version of the Dart SDK.
      # You can specify other versions if desired, see documentation here:
      # https://github.com/dart-lang/setup-dart/blob/main/README.md
      - uses: dart-lang/setup-dart@v1
      - name: Set up Flutter 
        uses: subosito/flutter-action@v2
        with: 
            flutter-version: '3.10.6'
      - name: Install dependencies
        run: flutter pub get
      # Consider passing '--fatal-infos' for slightly stricter analysis.
      - name: Analyze project source
        run: dart analyze
      - run: flutter build apk
      - uses: actions/upload-artifact@v1
        with:
          name: app-release.apk
          path: build/app/outputs/apk/release/app-release.apk
          test_apk_path: 'build/app/outputs/apk/release/app-release.apk'
      - name: SonarQube Scan
        run: |
          # Install SonarScanner (adjust the version as needed)
          curl -sSL https://sonarqube.example.com/static/cpp/build-wrapper-linux-x86.zip -o build-wrapper-linux-x86.zip
          unzip build-wrapper-linux-x86.zip
          chmod +x build-wrapper-linux-x86/build-wrapper-linux-x86-64
          sudo mv build-wrapper-linux-x86 /usr/local/bin/
          
          # Authenticate with SonarQube (use an access token or username/password)
          export SONAR_TOKEN="your-sonar-token"
          
          # Run the build wrapper to capture build information
          build-wrapper-linux-x86-64 --out-dir build-wrapper-output make clean all
          
          # Execute the SonarScanner analysis
          sonar-scanner \
            -Dsonar.projectKey=your-project-key \
            -Dsonar.organization=your-organization \
            -Dsonar.host.url=https://sonarqube.example.com \
            -Dsonar.login=$SONAR_TOKEN
            
      - name: Upload to saucelabs
      - uses: saucelabs/saucectl-run-action@v3
      

